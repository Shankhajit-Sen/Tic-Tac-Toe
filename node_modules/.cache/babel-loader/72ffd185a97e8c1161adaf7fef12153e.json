{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\OneDrive\\\\codeshp\\\\Tic-Tac-Toe\\\\src\\\\components\\\\board.jsx\";\n///\n// src/components/board.jsx\n///\nimport React from 'react';\nimport { Link } from 'react-router-dom'; // Import Storage object\n\nimport { Storage } from './../storage/storage'; // Import Box component\n\nimport { Box } from './board-box'; // Import utility functions\n\nimport * as utils from '../utils/functions'; // Create Board component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport class Board extends React.Component {\n  constructor(props) {\n    super(props); // Initialize component state\n\n    this.storage = new Storage();\n\n    this.handleBoardRestart = () => {\n      this.setState({\n        boxes: Array(9).fill(null),\n        history: [],\n        xIsNext: true\n      });\n    };\n\n    this.state = {\n      boxes: Array(9).fill(null),\n      history: [],\n      xIsNext: true\n    };\n  } // Create instance of Storage object\n\n\n  // Handle click on boxes on the board.\n  handleBoxClick(index) {\n    // get current state of boxes\n    const boxes = this.state.boxes.slice(); // Get current state of history\n\n    let history = this.state.history; // Stop the game if board contains winning combination\n\n    if (utils.findWinner(boxes) || boxes[index]) {\n      return;\n    } // Stop the game if all boxes are clicked (filled)\n\n\n    if (utils.areAllBoxesClicked(boxes) === true) {\n      return;\n    } // Mark the box either as 'x' or 'o'\n\n\n    boxes[index] = this.state.xIsNext ? 'x' : 'o'; // Add move to game history\n\n    history.push(this.state.xIsNext ? 'x' : 'o'); // Update component state with new data\n\n    this.setState({\n      boxes: boxes,\n      history: history,\n      xIsNext: !this.state.xIsNext\n    });\n  } // Handle board restart - set component state to initial state\n\n\n  render() {\n    // Get winner (if there is any)\n    const winner = utils.findWinner(this.state.boxes); // Are all boxes checked?\n\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes); // Status message\n\n    let status;\n\n    if (winner) {\n      // If winner exists, create status message\n      status = `The winner is: ${winner}!`; // Push data about the game to storage\n\n      this.storage.update([`${winner} won`]);\n    } else if (!winner && isFilled) {\n      // If game is drawn, create status message\n      status = 'Game drawn!'; // Push data about the game to storage\n\n      this.storage.update(['Game drawn']);\n    } else {\n      // If there is no winner and game is not drawn, ask the next player to make a move\n      status = `It is ${this.state.xIsNext ? 'x' : 'o'}'s turn.`;\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"board-link\",\n        children: \"Go back to scoreboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"board-heading\",\n            children: status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[0],\n              onClick: () => this.handleBoxClick(0)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[1],\n              onClick: () => this.handleBoxClick(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[2],\n              onClick: () => this.handleBoxClick(2)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[3],\n              onClick: () => this.handleBoxClick(3)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[4],\n              onClick: () => this.handleBoxClick(4)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[5],\n              onClick: () => this.handleBoxClick(5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"board-row\",\n            children: [/*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[6],\n              onClick: () => this.handleBoxClick(6)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[7],\n              onClick: () => this.handleBoxClick(7)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              value: this.state.boxes[8],\n              onClick: () => this.handleBoxClick(8)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-history\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"board-heading\",\n            children: \"Moves history:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"board-historyList\",\n            children: [this.state.history.length === 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"No moves to show.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 65\n            }, this), this.state.history.length !== 0 && this.state.history.map((move, index) => {\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Move \", index + 1, \": \", /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: move\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 74\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 40\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-footer\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: this.handleBoardRestart,\n            children: \"Start new game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/USER/OneDrive/codeshp/Tic-Tac-Toe/src/components/board.jsx"],"names":["React","Link","Storage","Box","utils","Board","Component","constructor","props","storage","handleBoardRestart","setState","boxes","Array","fill","history","xIsNext","state","handleBoxClick","index","slice","findWinner","areAllBoxesClicked","push","render","winner","isFilled","status","update","length","map","move"],"mappings":"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","sourcesContent":["///\r\n// src/components/board.jsx\r\n///\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// Import Storage object\r\nimport { Storage } from './../storage/storage'\r\n\r\n// Import Box component\r\nimport { Box } from './board-box'\r\n\r\n// Import utility functions\r\nimport * as utils from '../utils/functions'\r\n\r\n// Create Board component\r\nexport class Board extends React.Component {\r\n    constructor(props) {\r\n    super(props)\r\n\r\n        // Initialize component state\r\n        this.state = {\r\n            boxes: Array(9).fill(null),\r\n            history: [],\r\n            xIsNext: true\r\n        }\r\n    }\r\n\r\n    // Create instance of Storage object\r\n    storage = new Storage()\r\n\r\n    // Handle click on boxes on the board.\r\n    handleBoxClick(index) {\r\n        // get current state of boxes\r\n        const boxes = this.state.boxes.slice()\r\n\r\n        // Get current state of history\r\n        let history = this.state.history\r\n\r\n        // Stop the game if board contains winning combination\r\n        if (utils.findWinner(boxes) || boxes[index]) {\r\n            return\r\n        }\r\n\r\n        // Stop the game if all boxes are clicked (filled)\r\n        if(utils.areAllBoxesClicked(boxes) === true) {\r\n            return\r\n        }\r\n\r\n        // Mark the box either as 'x' or 'o'\r\n        boxes[index] = this.state.xIsNext ? 'x' : 'o'\r\n\r\n        // Add move to game history\r\n        history.push(this.state.xIsNext ? 'x' : 'o')\r\n\r\n        // Update component state with new data\r\n    this.setState({\r\n            boxes: boxes,\r\n            history: history,\r\n            xIsNext: !this.state.xIsNext\r\n        })\r\n    }\r\n\r\n    // Handle board restart - set component state to initial state\r\n    handleBoardRestart = () => {\r\n        this.setState({\r\n            boxes: Array(9).fill(null),\r\n            history: [],\r\n            xIsNext: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        // Get winner (if there is any)\r\n    const winner = utils.findWinner(this.state.boxes)\r\n\r\n        // Are all boxes checked?\r\n    const isFilled = utils.areAllBoxesClicked(this.state.boxes)\r\n\r\n        // Status message\r\n    let status\r\n\r\n        if (winner) {\r\n            // If winner exists, create status message\r\n            status = `The winner is: ${winner}!`\r\n\r\n            // Push data about the game to storage\r\n            this.storage.update([`${winner} won`])\r\n        } else if(!winner && isFilled) {\r\n            // If game is drawn, create status message\r\n            status = 'Game drawn!'\r\n\r\n            // Push data about the game to storage\r\n            this.storage.update(['Game drawn'])\r\n        } else {\r\n            // If there is no winner and game is not drawn, ask the next player to make a move\r\n            status = `It is ${(this.state.xIsNext ? 'x' : 'o')}'s turn.`\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* Link to scoreboard */}\r\n                <Link to=\"/\" className=\"board-link\">Go back to scoreboard</Link>\r\n\r\n                {/* The game board */}\r\n                <div className=\"board-wrapper\">\r\n                    <div className=\"board\">\r\n                        <h2 className=\"board-heading\">{status}</h2>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[0]} onClick={() => this.handleBoxClick(0)} />\r\n\r\n                            <Box value={this.state.boxes[1]} onClick={() => this.handleBoxClick(1)} />\r\n\r\n                            <Box value={this.state.boxes[2]} onClick={() => this.handleBoxClick(2)} />\r\n                        </div>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[3]} onClick={() => this.handleBoxClick(3)} />\r\n\r\n                            <Box value={this.state.boxes[4]} onClick={() => this.handleBoxClick(4)} />\r\n\r\n                            <Box value={this.state.boxes[5]} onClick={() => this.handleBoxClick(5)} />\r\n                        </div>\r\n\r\n                        <div className=\"board-row\">\r\n                            <Box value={this.state.boxes[6]} onClick={() => this.handleBoxClick(6)} />\r\n\r\n                            <Box value={this.state.boxes[7]} onClick={() => this.handleBoxClick(7)} />\r\n\r\n                            <Box value={this.state.boxes[8]} onClick={() => this.handleBoxClick(8)} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"board-history\">\r\n                        <h2 className=\"board-heading\">Moves history:</h2>\r\n\r\n                        {/* List with history of moves */}\r\n                        <ul className=\"board-historyList\">\r\n                            {this.state.history.length === 0 && <span>No moves to show.</span>}\r\n\r\n                            {this.state.history.length !== 0 && this.state.history.map((move, index) => {\r\n                                return <li key={index}>Move {index + 1}: <strong>{move}</strong></li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    {/* Button to start new game */}\r\n                    {winner && <div className=\"board-footer\">\r\n                        <button className=\"btn\" onClick={this.handleBoardRestart}>Start new game</button>\r\n                    </div>}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}