{"ast":null,"code":"///\n// src/utils/functions.js\n///\nexport function findWinner(boxes) {\n  // Array with winning combinations\n  const rows = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // Iterate over array with winning combinations\n\n  for (let i = 0; i < rows.length; i++) {\n    const [a, b, c] = rows[i]; // Check if the game board contains winning combination\n\n    if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\n      // Return the winner ('x' or 'o')\n      return boxes[a];\n    }\n  } // Otherwise do nothing\n\n\n  return null;\n}\nexport function areAllBoxesClicked(boxes) {\n  // Declare variable to store number of clicked boxes.\n  let count = 0; // Iterate over all boxes\n\n  boxes.forEach(function (item) {\n    // Check if box is clicked (not null)\n    if (item !== null) {\n      // If yes, increase the value of count by 1\n      count++;\n    }\n  }); // Check if all boxes are clicked (filled)\n\n  if (count === 9) {\n    return true;\n  } else {\n    return false;\n  }\n}","map":{"version":3,"sources":["C:/Users/USER/OneDrive/codeshp/Tic-Tac-Toe/src/utils/functions.js"],"names":["findWinner","boxes","rows","i","length","a","b","c","areAllBoxesClicked","count","forEach","item"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAC9B;AACA,QAAMC,IAAI,GAAG,CACT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADS,EAET,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFS,EAGT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHS,EAIT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJS,EAKT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALS,EAMT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANS,EAOT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPS,EAQT,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARS,CAAb,CAF8B,CAa9B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAACE,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,IAAI,CAACC,CAAD,CAAtB,CADkC,CAGlC;;AACA,QAAIF,KAAK,CAACI,CAAD,CAAL,IAAYJ,KAAK,CAACI,CAAD,CAAL,KAAaJ,KAAK,CAACK,CAAD,CAA9B,IAAqCL,KAAK,CAACI,CAAD,CAAL,KAAaJ,KAAK,CAACM,CAAD,CAA3D,EAAgE;AAC5D;AACA,aAAON,KAAK,CAACI,CAAD,CAAZ;AACH;AACJ,GAtB6B,CAwB9B;;;AACA,SAAO,IAAP;AACH;AAED,OAAO,SAASG,kBAAT,CAA4BP,KAA5B,EAAmC;AACtC;AACA,MAAIQ,KAAK,GAAG,CAAZ,CAFsC,CAItC;;AACAR,EAAAA,KAAK,CAACS,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1B;AACA,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACf;AACAF,MAAAA,KAAK;AACR;AACJ,GAND,EALsC,CAatC;;AACA,MAAIA,KAAK,KAAK,CAAd,EAAiB;AACb,WAAO,IAAP;AACH,GAFD,MAEO;AACH,WAAO,KAAP;AACH;AACJ","sourcesContent":["///\r\n// src/utils/functions.js\r\n///\r\nexport function findWinner(boxes) {\r\n    // Array with winning combinations\r\n    const rows = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ]\r\n\r\n    // Iterate over array with winning combinations\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const [a, b, c] = rows[i]\r\n\r\n        // Check if the game board contains winning combination\r\n        if (boxes[a] && boxes[a] === boxes[b] && boxes[a] === boxes[c]) {\r\n            // Return the winner ('x' or 'o')\r\n            return boxes[a]\r\n        }\r\n    }\r\n\r\n    // Otherwise do nothing\r\n    return null\r\n}\r\n\r\nexport function areAllBoxesClicked(boxes) {\r\n    // Declare variable to store number of clicked boxes.\r\n    let count = 0\r\n\r\n    // Iterate over all boxes\r\n    boxes.forEach(function (item) {\r\n        // Check if box is clicked (not null)\r\n        if (item !== null) {\r\n            // If yes, increase the value of count by 1\r\n            count++\r\n        }\r\n    })\r\n\r\n    // Check if all boxes are clicked (filled)\r\n    if (count === 9) {\r\n        return true\r\n    } else {\r\n        return false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}